/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vitalityvault;

import java.awt.BorderLayout;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.DriverManager;
import javax.swing.JOptionPane;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

/**
 *
 * @author deand
 */
public class VVCalTrackerGUI extends javax.swing.JFrame {

    private int totCalCount = 0;
    public JTextArea calTA;
    private VVHGUI vvHGUIInstance;
    Connection myConn;//declare instance of Connection class

    /**
     * Creates new form VitalityVaultCalTrackerGUI
     */
    public VVCalTrackerGUI() {
        initComponents();
        initializeComponents();
        getConnection();
        calTA = new javax.swing.JTextArea();
        initializeComponents();
    }

    private void initializeComponents() {
        // Initialize calTA
        calTA = new JTextArea();
        // Add calTA to the GUI layout
        // (Ensure it's properly added to the layout)
    }

    private void getConnection() {
        try {
            myConn = DriverManager.getConnection("jdbc:mysql://localhost:3306/foods", "dean_dolan", "temppassword");
        } catch (SQLException e) {
            System.out.println("Error connecting" + e.getMessage());
        }
    }

    public void setCalTaText(String text) {

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        titleLbl = new javax.swing.JLabel();
        calIntakeBtn = new javax.swing.JButton();
        foodCalCheckerBtn = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        jTextField1.setText("jTextField1");

        jButton2.setText("jButton2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 204, 204));

        titleLbl.setFont(new java.awt.Font("Verdana Pro Cond", 1, 36)); // NOI18N
        titleLbl.setText(" Vitality Vault");

        calIntakeBtn.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        calIntakeBtn.setText("Calorie Intake");
        calIntakeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calIntakeBtnActionPerformed(evt);
            }
        });

        foodCalCheckerBtn.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        foodCalCheckerBtn.setText("Food Calorie Checker");
        foodCalCheckerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                foodCalCheckerBtnActionPerformed(evt);
            }
        });

        jButton1.setText("<- Prev");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 254, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(titleLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(278, 278, 278))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(foodCalCheckerBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(calIntakeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(240, 240, 240))))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(calIntakeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(foodCalCheckerBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        VVCalTrackerGUI closeGUI = new VVCalTrackerGUI();
        closeGUI.setVisible(false);
        vvworkout myGUI = new vvworkout();
        myGUI.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void foodCalCheckerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_foodCalCheckerBtnActionPerformed
        // Prompt the user to input a food name
        String foodName = JOptionPane.showInputDialog(null, "Enter a food name:");
        if (foodName != null && !foodName.isEmpty()) {
            try {
                // Create a PreparedStatement to query the database for the given food name
                PreparedStatement myStatement = myConn.prepareStatement("SELECT Calories, Protein, Fat, Carbohydrates FROM foods WHERE Food_Name = ?");
                myStatement.setString(1, foodName);

                // Execute the query
                ResultSet myRs = myStatement.executeQuery();

                if (myRs.next()) {
                    // Food found, retrieve and display calories, protein, fat, and carbohydrates
                    int calories = myRs.getInt("Calories");
                    int protein = myRs.getInt("Protein");
                    int fat = myRs.getInt("Fat");
                    int carbs = myRs.getInt("Carbohydrates");
                    JOptionPane.showMessageDialog(null, "Food Name: " + foodName + "\n" + "Calories: " + calories + "\n" + "Protein: " + protein + "\n" + "Fat: " + fat + "\n" + "Carbohydrates: " + carbs);
                } else {
                    // Food not found
                    JOptionPane.showMessageDialog(null, "Food not found in the database.");
                }

            } catch (SQLException e) {
                // Handle any SQL errors
                System.out.println("Error executing SQL query: " + e.getMessage());
            }
        } else {
            // User canceled or did not enter any food name
            JOptionPane.showMessageDialog(null, "No food name entered.");
        }
    }//GEN-LAST:event_foodCalCheckerBtnActionPerformed

    private void calIntakeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calIntakeBtnActionPerformed
        // Prompt the user for the month
        String selectedMonth = (String) JOptionPane.showInputDialog(
                null,
                "Select the month:",
                "Month Selection",
                JOptionPane.PLAIN_MESSAGE,
                null,
                new String[]{"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"},
                "January");

        if (selectedMonth != null) { // User clicked OK
            // Prompt the user for the day
            String dayStr = JOptionPane.showInputDialog(null, "Enter the day (1-31):");
            if (dayStr != null) { // User clicked OK
                try {
                    int day = Integer.parseInt(dayStr);
                    int maxDay = getMaxDay(selectedMonth);

                    if (day < 1 || day > maxDay) {
                        JOptionPane.showMessageDialog(null, "Invalid day for " + selectedMonth + ". Please enter a number between 1 and " + maxDay + ".");
                        return;
                    }

                    // Prompt the user for the calorie intake
                    String calIntakeStr = JOptionPane.showInputDialog(null, "Enter calorie intake:");
                    if (calIntakeStr != null) { // User clicked OK
                        try {
                            int calIntake = Integer.parseInt(calIntakeStr);

                            // Construct the SQL UPDATE statement dynamically based on the selected month and day
                            String updateStatement = "UPDATE calories_intake SET " + selectedMonth + " = " + selectedMonth + " + ? WHERE Day = ?";
                            System.out.println("SQL Statement: " + updateStatement); // Debugging

                            PreparedStatement preparedStatement = myConn.prepareStatement(updateStatement);
                            preparedStatement.setInt(1, calIntake);
                            preparedStatement.setInt(2, day);

                            // Execute the UPDATE statement
                            int rowsAffected = preparedStatement.executeUpdate();

                            if (rowsAffected > 0) {
                                // Query the database to get the total calories for the day
                                String queryTotalCalories = "SELECT SUM(" + selectedMonth + ") AS TotalCalories FROM calories_intake WHERE Day = ?";
                                PreparedStatement totalCaloriesStatement = myConn.prepareStatement(queryTotalCalories);
                                totalCaloriesStatement.setInt(1, day);
                                ResultSet resultSet = totalCaloriesStatement.executeQuery();

                                // Retrieve the total calories
                                int totalCaloriesForDay = 0;
                                if (resultSet.next()) {
                                    totalCaloriesForDay = resultSet.getInt("TotalCalories");
                                }

                                JOptionPane.showMessageDialog(null, "Total calories for that day is: " + totalCaloriesForDay);
                                JOptionPane.showMessageDialog(null, "Calorie intake added successfully for " + selectedMonth + ", Day: " + day);
                            } else {
                                JOptionPane.showMessageDialog(null, "No matching records found to update.");
                            }
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "Invalid calorie intake. Please enter a valid integer.");
                        } catch (SQLException ex) {
                            ex.printStackTrace(); // Print stack trace for debugging
                            JOptionPane.showMessageDialog(null, "Error executing SQL query: " + ex.getMessage());
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Invalid calorie intake. Please enter a valid integer.");
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Invalid day. Please enter a valid integer.");
                }
            }
        }
    }

// Method to get the maximum day for a given month
    private int getMaxDay(String month) {
        switch (month) {
            case "February":
                return 28; // Assuming not a leap year
            case "April":
            case "June":
            case "September":
            case "November":
                return 30;
            default:
                return 31;
            // }
        }
    }//GEN-LAST:event_calIntakeBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VVCalTrackerGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton calIntakeBtn;
    private javax.swing.JButton foodCalCheckerBtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel titleLbl;
    // End of variables declaration//GEN-END:variables

}
